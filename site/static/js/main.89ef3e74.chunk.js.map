{"version":3,"sources":["rick.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","event","key","toggleRecording","document","removeEventListener","state","input","recognition","record","bind","assertThisInitialized","recorder","addEventListener","_this2","setState","audioContext","window","AudioContext","webkitAudioContext","Recorder","navigator","mediaDevices","getUserMedia","audio","sampleRate","channelCount","then","stream","init","catch","err","console","log","start","stop","_ref","blob","audioUrl","buffer","URL","createObjectURL","audio_file","formData","FormData","append","options","method","body","headers","fetch","response","text","react_default","a","createElement","className","src","logo","alt","id","type","disabled","es","onStop","onData","strokeColor","backgroundColor","React","Component","Boolean","location","hostname","match","routing","react_router_dom","react_router","path","component","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4SCwGzBC,qBA/FX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWJI,eAAiB,SAACC,GACI,MAAdA,EAAMC,MACNT,EAAKU,kBACLC,SAASC,oBAAoB,UAAWZ,EAAKO,gBAAgB,KAbjEP,EAAKa,MAAQ,CACTC,MAAO,GACPC,YAAa,GACbC,QAAQ,GAEZhB,EAAKO,eAAiBP,EAAKO,eAAeU,KAApBhB,OAAAiB,EAAA,EAAAjB,CAAAD,IACtBA,EAAKU,gBAAkBV,EAAKU,gBAAgBO,KAArBhB,OAAAiB,EAAA,EAAAjB,CAAAD,IACvBA,EAAKmB,SAAW,KATNnB,mFAoBVW,SAASS,iBAAiB,UAAWjB,KAAKI,0DAI5B,IAAAc,EAAAlB,KACd,IAA0B,IAAtBA,KAAKU,MAAMG,OAAkB,CAC7Bb,KAAKmB,SAAS,CAAEN,QAAQ,EAAMD,YAAa,KAE3C,IAAMQ,EAAe,IAAIC,OAAOC,cAAkB,IAAID,OAAOE,mBAE7DvB,KAAKgB,SAAW,IAAIQ,IAASJ,GAQ7BK,UAAUC,aAAaC,aANH,CAChBC,MAAO,CACHC,WAAY,KACZC,aAAc,KAIjBC,KAAK,SAAAC,GAAM,OAAId,EAAKF,SAASiB,KAAKD,KAClCE,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,8BAA+BF,KACxDJ,KAAK,WACFb,EAAKF,SAASsB,eAItBtC,KAAKmB,SAAS,CAAEN,QAAQ,IACxBb,KAAKgB,SAASuB,OACTR,KAAK,SAAAS,GAAsB,IAAnBC,EAAmBD,EAAnBC,KAGCC,GAHkBF,EAAbG,OAGMC,IAAIC,gBAAgBJ,IACrCL,QAAQC,IAAIK,GAKZ,IAAMI,EAAaL,EACbM,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,GAEzB,IAAMI,EAAU,CACZC,OAAQ,OACRC,KAAML,GAENG,GAAWA,EAAQG,gBACZH,EAAQG,QAAQ,gBAG3BC,MAAM,sCAAuCJ,GACxCnB,KAAK,SAAAwB,GACF,OAAOA,EAASC,SACjBzB,KAAK,SAAAyB,GACJpB,QAAQC,IAAImB,GACZtC,EAAKC,SAAS,CAAEP,YAAa4C,yCAOjD,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAClB,IAAtB/D,KAAKU,MAAMG,OAAmB4C,EAAAC,EAAAC,cAAA,8BAA4BF,EAAAC,EAAAC,cAAA,4BACpC,IAAtB3D,KAAKU,MAAMG,OAAmB4C,EAAAC,EAAAC,cAAA,UAAQK,GAAG,QAAQC,KAAK,SAASC,UAAQ,GAAzC,oCAAsFT,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASD,GAAG,QAAzB,wCACzF,KAA3BhE,KAAKU,MAAME,YAAqB6C,EAAAC,EAAAC,cAAA,KAAGK,GAAG,WAAN,0EAA6FP,EAAAC,EAAAC,cAAA,KAAGK,GAAG,eAAN,IAAsBhE,KAAKU,MAAME,YAAjC,KAC9H6C,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAUtD,OAAQb,KAAKU,MAAMG,OAAQ+C,UAAU,aAAaQ,OAAQpE,KAAKoE,OAAQC,OAAQrE,KAAKqE,OAAQC,YAAY,UAAUC,gBAAgB,qBA1F9IC,IAAMC,YCKJC,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,KAAKC,UAAWtF,MAKlCuF,IAASC,OAAON,EAAStE,SAAS6E,eAAe,SDkH3C,kBAAmB5D,WACrBA,UAAU6D,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.89ef3e74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rick.fcf97f8c.png\";","import React from 'react';\nimport logo from './rick.png';\nimport Recorder from 'recorder-js';\nimport { ReactMic } from 'react-mic';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            input: \"\",\n            recognition: \"\",\n            record: false\n        }\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.toggleRecording = this.toggleRecording.bind(this);\n        this.recorder = null;\n    }\n\n    handleKeyPress = (event) => {\n        if (event.key === ' ') {\n            this.toggleRecording();\n            document.removeEventListener('keydown', this.handleKeyPress, true);\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n\n    toggleRecording() {\n        if (this.state.record === false) {\n            this.setState({ record: true, recognition: \"\" })\n\n            const audioContext = new window.AudioContext() || new window.webkitAudioContext()\n\n            this.recorder = new Recorder(audioContext)\n\n            const constraints = {\n                audio: {\n                    sampleRate: 16000,\n                    channelCount: 1\n                }\n            }\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => this.recorder.init(stream))\n                .catch(err => console.log('There is a bug streaming...', err))\n                .then(() => {\n                    this.recorder.start()\n                })\n        }\n        else {\n            this.setState({ record: false });\n            this.recorder.stop()\n                .then(({ blob, buffer }) => {\n                    // buffer is an AudioBuffer\n                    //to replay the audio\n                    const audioUrl = URL.createObjectURL(blob);\n                    console.log(audioUrl)\n                    //const audio = new Audio(audioUrl);\n                    //audio.play();\n\n                    //send to the server\n                    const audio_file = blob;\n                    const formData = new FormData();\n                    formData.append('audio', audio_file);\n\n                    const options = {\n                        method: 'POST',\n                        body: formData\n                    };\n                    if (options && options.headers) {\n                        delete options.headers['Content-Type'];\n                    }\n\n                    fetch('http://127.0.0.1:6060/api/sendaudio', options)\n                        .then(response => {\n                            return response.text()\n                        }).then(text => {\n                            console.log(text);\n                            this.setState({ recognition: text })\n                        });\n                });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    {this.state.record === false ? <h2> Speak with Rick</h2> : <h2> Speaking ...</h2>}\n                    {this.state.record === false ? <button id=\"speak\" type=\"button\" disabled> Hit 'Space' and start speaking </button> : <button type=\"button\" id=\"stop\">Hit 'Space' and wait for the answer </button>}\n                    {this.state.recognition === \"\" ? <p id=\"comment\"> Try: \"Hello\", \"Check Weather\", \"Check Traffic\", \"Search for RICK\" ...</p> : <p id=\"recognition\"> {this.state.recognition} </p>}\n                    <ReactMic record={this.state.record} className=\"sound-wave\" onStop={this.onStop} onData={this.onData} strokeColor=\"#00FF00\" backgroundColor=\"#282C34\" />\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route path=\"/*\" component={App} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\nserviceWorker.unregister();"],"sourceRoot":""}